{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOE42lMjtLJejX+RtvgOsof",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/itz-aniket-akm/FMML_Module8_Project/blob/main/Module9_Lab3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kCpbL40ggQf1"
      },
      "source": [
        "# Module 9: Convolutional Neural Networks\n",
        "## **Lab 3**\n",
        "### Module coordinator: Kushagra Agarwal"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0hAW8ptqVeyP"
      },
      "source": [
        "## 1. Understanding Convolutions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q6wfvhccKxWx"
      },
      "source": [
        "<img src=\"https://miro.medium.com/max/464/0*e-SMFTzO8r7skkpc\" width=650px/>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "yZD5S7IQgHbU"
      },
      "outputs": [],
      "source": [
        "import cv2\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "BDE4WBHalreb"
      },
      "outputs": [],
      "source": [
        "# Importing some pytorch packages\n",
        "import torch\n",
        "from torch.nn import Conv2d"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hbpRXyTpVv7u"
      },
      "source": [
        "Central to CNNs, a convolution operation is a linear element-wise multiplication operation between a small filter/kernel and same-sized patch from the image. We move this filter over the image like a sliding window from top left to bottom right. For each point on the image, a value is calculated based on the filter using a convolution operation. These filters can do simplest task like checking if there is a vertical line in the image or complicated task like detecting a human eye in the image.\n",
        "\n",
        "Let's look at the convolution formula:\n",
        "\n",
        "Convolution between image\n",
        "$f(x, y)$ and kernel $k(x, y)$ is\n",
        "$$f(x,y) * k(x,y) = \\sum \\limits _{i=0} ^{W-1} \\sum \\limits _{j=0} ^{H-1} f(i, j) k(x − i, y − j)$$\n",
        "\n",
        "where $W$ and $H$ are the the width and height of the image.\n",
        "\n",
        "The code demonstrates the convolution operation of a 2D matrix (image) with various filters"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "amI6DTS0Ksvo"
      },
      "source": [
        "<img src=\"https://www.researchgate.net/profile/Chaim-Baskin/publication/318849314/figure/fig1/AS:614287726870532@1523469015098/Image-convolution-with-an-input-image-of-size-7-7-and-a-filter-kernel-of-size-3-3.png\" alt=\"Convolution\" width=650px height=280px/>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 853
        },
        "id": "IalqupPPkDil",
        "outputId": "784714d0-c9ce-4229-9a7f-dbd97857f895"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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+XyZXgKGSLp/h3t6DeycFStWaMeOHdqzZ4+neEnSmDFjNGvWLB07dqzPMX6/X36/P5WlAQBGCE9PITrntGLFCm3btk27du3StGnTPF9hd3e3WlpaVFBQ4HkuAADneHoEVllZqY0bN2r79u0aN26cotGoJCkYDGrs2LGSpCVLlmjixImKRCKSpMcff1zz5s3T9OnTderUKT355JM6ceKEli9fnuatAABGEk8Be+655yRJCxYsSDr/4osv6mc/+5kkqbW1VVlZ/3tg98UXX+j+++9XNBrVlVdeqZKSEu3du1czZswY2MoBACNaym/iGErxeFzBYJA3cQDDEG/iGDnS/Tucv4UIADCJgAEATCJgAACTCBgAwCQCBgAwiYABAEwiYAAAkwgYAMAkAgYAMImAAQBMImAAAJMIGADAJAIGADCJgAEATCJgAACTCBgAwCQCBgAwiYABAEwiYAAAkwgYAMAkAgYAMImAAQBMImAAAJMIGADAJAIGADCJgAEATCJgAACTCBgAwCQCBgAwiYABAEwiYAAAkwgYAMAkAgYAMImAAQBMImAAAJMIGADAJAIGADCJgAEATCJgAACTCBgAwCQCBgAwiYABAEwiYAAAkwgYAMAkAgYAMImAAQBMImAAAJMIGADAJAIGADCJgAEATCJgAACTPAXsueee0w033KBAIKBAIKBwOKw33nij3zlbtmzRNddco5ycHF1//fV6/fXXB7RgAAAkjwGbNGmSfv/73+vAgQPav3+/fvzjH+vuu+/WkSNHeh2/d+9eLV68WMuWLdOhQ4dUUVGhiooKHT58OC2LBwCMXD7nnBvIDxg/fryefPJJLVu27Lx/W7RokTo7O7Vjx47EuXnz5qm4uFjr1q3r82d2dXWpq6srcTkWi2ny5Mlqa2tTIBAYyHIBXGKCwWCml4AhcurUqbTe3qNTndjd3a0tW7aos7NT4XC41zFNTU2qqqpKOldeXq66urp+f3YkEtFjjz123vlQKJTqcgEAGfbvf/87swFraWlROBzW119/rcsvv1zbtm3TjBkzeh0bjUaVl5eXdC4vL0/RaLTf66iurk4K36lTpzRlyhS1traOmP+txeNxhUKhEfeok32PnH2PxD1LI3Pf555FGz9+fFp/rueAFRYWqrm5WbFYTK+++qqWLl2qxsbGPiOWCr/fL7/ff975YDA4Ym7wc869YWakYd8jx0jcszQy952Vld43vnsOWHZ2tqZPny5JKikp0d/+9jc9++yzev75588bm5+fr46OjqRzHR0dys/PT3G5AAB8Y8A57OnpSXrDxbeFw2E1NDQknauvr+/zNTMAAC6Wp0dg1dXVuuOOOzR58mR9+eWX2rhxo3bv3q0333xTkrRkyRJNnDhRkUhEkrRy5UrNnz9fa9eu1cKFC7Vp0ybt379f69ev97RIv9+vNWvW9Pq04nA1Evcsse+RtO+RuGdpZO57sPbs6W30y5YtU0NDg9rb2xUMBnXDDTfo4Ycf1m233SZJWrBggaZOnara2trEnC1btuiRRx7Rv/71L1199dX64x//qDvvvDOtmwAAjDwD/hwYAACZwN9CBACYRMAAACYRMACASQQMAGDSJROwmpoaTZ06VTk5OZo7d67ef//9fscPh69p8bLn2tpa+Xy+pCMnJ2cIVztwe/bs0V133aUJEybI5/Nd8G9iStLu3bt14403yu/3a/r06UnvcLXC675379593m3t8/ku+CfYLiWRSESzZ8/WuHHjlJubq4qKCh09evSC86zfr1PZt/X7dia/ZuuSCNjmzZtVVVWlNWvW6ODBgyoqKlJ5eblOnjzZ6/jh8DUtXvcsffOnZ9rb2xPHiRMnhnDFA9fZ2amioiLV1NRc1Pjjx49r4cKFuvXWW9Xc3KxVq1Zp+fLlic8dWuF13+ccPXo06fbOzc0dpBWmX2NjoyorK7Vv3z7V19fr7Nmzuv3229XZ2dnnnOFwv05l35Lt+3ZGv2bLXQLmzJnjKisrE5e7u7vdhAkTXCQS6XX8T3/6U7dw4cKkc3PnznW//OUvB3Wd6eR1zy+++KILBoNDtLrBJ8lt27at3zEPPfSQu+6665LOLVq0yJWXlw/iygbXxez7nXfecZLcF198MSRrGgonT550klxjY2OfY4bD/fq7Lmbfw+2+7ZxzV155pXvhhRd6/bd03s4ZfwR25swZHThwQGVlZYlzWVlZKisrU1NTU69zmpqaksZL33xNS1/jLzWp7FmSTp8+rSlTpigUCvX7P5zhwvrtPFDFxcUqKCjQbbfdpvfeey/TyxmQWCwmSf3+NfLheHtfzL6l4XPf7u7u1qZNmy74NVvpup0zHrDPP/9c3d3dnr52JdWvablUpLLnwsJCbdiwQdu3b9fLL7+snp4elZaW6pNPPhmKJWdEX7dzPB7XV199laFVDb6CggKtW7dOW7du1datWxUKhbRgwQIdPHgw00tLSU9Pj1atWqWbb75ZM2fO7HOc9fv1d13svofDfbulpUWXX365/H6/HnjggUH5mq3epPyFlhha4XA46X80paWluvbaa/X888/riSeeyODKkG6FhYUqLCxMXC4tLdVHH32kp59+Wi+99FIGV5aayspKHT58WO+++26mlzKkLnbfw+G+PRRfs9WbjD8Cu+qqqzRq1ChPX7ti/WtaUtnzd40ZM0azZs3SsWPHBmOJl4S+budAIKCxY8dmaFWZMWfOHJO39YoVK7Rjxw698847mjRpUr9jrd+vv83Lvr/L4n373NdslZSUKBKJqKioSM8++2yvY9N5O2c8YNnZ2SopKUn62pWenh41NDT0+Ryq9a9pSWXP39Xd3a2WlhYVFBQM1jIzzvrtnE7Nzc2mbmvnnFasWKFt27Zp165dmjZt2gXnDIfbO5V9f9dwuG8P2ddspfAGk7TbtGmT8/v9rra21v3jH/9wv/jFL9wVV1zhotGoc865e++9161evTox/r333nOjR492f/rTn9wHH3zg1qxZ48aMGeNaWloytQXPvO75sccec2+++ab76KOP3IEDB9w999zjcnJy3JEjRzK1Bc++/PJLd+jQIXfo0CEnyT311FPu0KFD7sSJE84551avXu3uvffexPiPP/7YXXbZZe63v/2t++CDD1xNTY0bNWqU27lzZ6a2kBKv+3766addXV2d++c//+laWlrcypUrXVZWlnv77bcztQXPHnzwQRcMBt3u3btde3t74vjvf/+bGDMc79ep7Nv6fXv16tWusbHRHT9+3P397393q1evdj6fz7311lvOucG9nS+JgDnn3J///Gc3efJkl52d7ebMmeP27duX+Lf58+e7pUuXJo1/5ZVX3I9+9COXnZ3trrvuOvfaa68N8YoHzsueV61alRibl5fn7rzzTnfw4MEMrDp1594e/t3j3D6XLl3q5s+ff96c4uJil52d7X7wgx+4F198ccjXPVBe9/2HP/zB/fCHP3Q5OTlu/PjxbsGCBW7Xrl2ZWXyKetuvpKTbbzjer1PZt/X79s9//nM3ZcoUl52d7b7//e+7n/zkJ4l4OTe4tzNfpwIAMCnjr4EBAJAKAgYAMImAAQBMImAAAJMIGADAJAIGADCJgAEATCJgAACTCBgAwCQCBgAwiYABAEz6f03PHiBbTf7xAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# 2D 3x3 binary image with vertical edge\n",
        "image1 = np.array([[1,1,0], [1,1,0], [1,1,0]])\n",
        "\n",
        "# 2D 3x3 binary image with horizontal edge\n",
        "image2 = np.array([[0,0,0], [0,0,0], [1,1,1]])\n",
        "\n",
        "# On plotting the images\n",
        "plt.imshow(image1, cmap='gray', extent=[0, 3, 3, 0])\n",
        "plt.show()\n",
        "plt.imshow(image2, cmap='gray', extent=[0, 3, 3, 0])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g42INjCaketK",
        "outputId": "8dcddf88-90b2-411a-9dd7-3e0101f98007"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Output from first image:  3\n",
            "Output from second image:  0\n"
          ]
        }
      ],
      "source": [
        "# Vertical Line filter\n",
        "filter = np.array([[1,0,-1],\n",
        "                   [1,0,-1],\n",
        "                   [1,0,-1]])\n",
        "\n",
        "# Applying filter to first image\n",
        "output = np.sum(np.multiply(image1, filter))\n",
        "print('Output from first image: ', output)\n",
        "\n",
        "# Applying filter to second image\n",
        "output = np.sum(np.multiply(image2, filter))\n",
        "print('Output from second image: ', output)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tba3ySYUk2df",
        "outputId": "73ec989c-df80-4f87-da84-904981eba38a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Output from first image:  0\n",
            "Output from second image:  3\n"
          ]
        }
      ],
      "source": [
        "# Horizontal edge filter\n",
        "filter = np.array([[-1,-1,-1],\n",
        "                   [ 0, 0, 0],\n",
        "                   [ 1, 1, 1]])\n",
        "\n",
        "output = np.sum(np.multiply(image1, filter))\n",
        "print('Output from first image: ', output)\n",
        "\n",
        "output = np.sum(np.multiply(image2, filter))\n",
        "print('Output from second image: ', output)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BmYcPhDgk_in"
      },
      "source": [
        "Non-zero output suggests that there is a vertical edge present in the first image and not present in the second image. Similarly, horizontal edge is detected in second."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UNdrDtAKqyj2"
      },
      "source": [
        "Let's define a function to use convolution layer from Pytorch and use our own kernel to detect edges in image"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "G5fRJziBk3YB"
      },
      "outputs": [],
      "source": [
        "def apply_conv(image, kernel, padding=0, stride=1):\n",
        "\n",
        "  #--------IMAGE PREPROCESSING-------\n",
        "  image = torch.from_numpy(image)\n",
        "  # Pytorch requires input to convolution in (N,C,H,W), where N = batch size and C=#channels in input\n",
        "  input = image.view((1,1,image.shape[0], image.shape[1]))\n",
        "\n",
        "  # --------------KERNEL-------------\n",
        "  kernel = torch.from_numpy(kernel.astype(np.float32))\n",
        "\n",
        "  # Pytorch requires kernel of shape (N,C,H,W), where N = batch size and C=#channels in input\n",
        "  kernel = kernel.view((1,1,kernel.shape[0], kernel.shape[1]))\n",
        "\n",
        "  # ---------CONVOLUTION LAYER from Pytorch--------\n",
        "  conv = Conv2d(in_channels=1, out_channels=1, kernel_size=kernel.shape, padding=padding, stride=stride)\n",
        "\n",
        "  # Set the kernel weights in the convolution layer\n",
        "  conv.weight = torch.nn.Parameter(kernel)\n",
        "\n",
        "  # ---------APPLY CONVOLUTION--------\n",
        "  output = conv(input.float())\n",
        "  output_img = output.data.numpy()  # Tensor to back in numpy\n",
        "  output_img = output_img.reshape((-1, output_img.shape[-1])) # Reshape to 2D image\n",
        "\n",
        "  return output_img"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Our original lotus image\n",
        "image = cv2.imread('/content/Screenshot 2024-04-06 182757.png', 0)\n",
        "\n",
        "filter = np.array([[-1,-1,-1],\n",
        "                   [ 0, 0, 0],\n",
        "                   [ 1, 1, 1]])\n",
        "\n",
        "out1 = apply_conv(image, filter, padding=0, stride=1)\n",
        "\n",
        "filter = np.array([[1,0,-1],\n",
        "                   [1,0,-1],\n",
        "                   [1,0,-1]])\n",
        "\n",
        "out2 = apply_conv(image, filter, padding=0, stride=1)"
      ],
      "metadata": {
        "id": "-6m42O5ftXNq"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 212
        },
        "id": "xgwXwbUKnmEr",
        "outputId": "d0eaffa3-ccee-4015-be39-2c4082590b94"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fig = plt.figure(figsize=(10,6))\n",
        "ax = fig.add_subplot(1,3,1)\n",
        "ax.imshow(image, cmap='gray')\n",
        "ax.set_title('Original Image')\n",
        "ax = fig.add_subplot(1,3,2)\n",
        "ax.set_title('Horizontal edge')\n",
        "ax.imshow(out1, cmap='gray')\n",
        "ax = fig.add_subplot(1,3,3)\n",
        "ax.imshow(out2, cmap='gray')\n",
        "ax.set_title('Vertical edge')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FpA0yEk1BgRb"
      },
      "source": [
        "## Pooling Layers\n",
        "\n",
        "Pooling layers are used to reduce the dimensions of the feature maps. Thus, it reduces the number of parameters to learn and the amount of computation performed in the network. The pooling layer summarises the features present in a region of the feature map generated by a convolution layer.\n",
        "\n",
        "1) Max Pooling:\n",
        "\n",
        "<img src='https://media.geeksforgeeks.org/wp-content/uploads/20190721025744/Screenshot-2019-07-21-at-2.57.13-AM.png' height=150px/>\n",
        "\n",
        "2) Average Pooling:\n",
        "\n",
        "<img src='https://media.geeksforgeeks.org/wp-content/uploads/20190721030705/Screenshot-2019-07-21-at-3.05.56-AM.png' height=150px/>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eu3QIU7AEO_x"
      },
      "source": [
        "## Softmax layer/activation\n",
        "Recall that logistic regression produces a decimal between 0 and 1.0. For example, a logistic regression output of 0.8 from an email classifier suggests an 80% chance of an email being spam and a 20% chance of it being not spam. Clearly, the sum of the probabilities of an email being either spam or not spam is 1.0.\n",
        "\n",
        "Softmax extends this idea into a multi-class world. That is, Softmax assigns decimal probabilities to each class in a multi-class problem. Those decimal probabilities must add up to 1.0. This additional constraint helps training converge more quickly than it otherwise would.\n",
        "Softmax is implemented through a neural network layer just before the output layer. The Softmax layer must have the same number of nodes as the output layer.\n",
        "\n",
        "<img src='https://miro.medium.com/max/1400/1*ReYpdIZ3ZSAPb2W8cJpkBg.jpeg' height=170px />"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P6grxC0TKKSF"
      },
      "source": [
        "## Learning to train a CNN network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "qlO-uZUHnn_-"
      },
      "outputs": [],
      "source": [
        "# Import packages\n",
        "import torch\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NnezCUbwGqzd",
        "outputId": "6ac41211-6ee0-4ee5-c335-d730998a1e8f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 170498071/170498071 [00:04<00:00, 38598183.42it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./data/cifar-10-python.tar.gz to ./data\n",
            "Files already downloaded and verified\n"
          ]
        }
      ],
      "source": [
        "#  Images returned from torchvision dataset classes is in range [0,1]\n",
        "# We transform them to tensors and normalize them to range [-1,1] using 'Normalize' transform\n",
        "\n",
        "transform = transforms.Compose(\n",
        "    [transforms.ToTensor(),\n",
        "     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n",
        "\n",
        "batch_size = 128\n",
        "\n",
        "trainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n",
        "                                        download=True, transform=transform)\n",
        "trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,\n",
        "                                          shuffle=True, num_workers=2)\n",
        "\n",
        "testset = torchvision.datasets.CIFAR10(root='./data', train=False,\n",
        "                                       download=True, transform=transform)\n",
        "testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,\n",
        "                                         shuffle=False, num_workers=2)\n",
        "\n",
        "# Classes in CIFAR10\n",
        "classes = ('plane', 'car', 'bird', 'cat',\n",
        "           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e2M57DhHGupn",
        "outputId": "69bfb193-ab00-46d4-d523-b60a744a553b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training data shape :  (50000, 32, 32, 3) 50000\n",
            "Testing data shape :  (10000, 32, 32, 3) 10000\n",
            "Total number of outputs :  10\n",
            "Output classes :  ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n"
          ]
        }
      ],
      "source": [
        "print('Training data shape : ', trainset.data.shape, len(trainset.targets))\n",
        "print('Testing data shape : ', testset.data.shape, len(testset.targets))\n",
        "\n",
        "# Find the unique numbers from the train labels\n",
        "nClasses = len(classes)\n",
        "print('Total number of outputs : ', nClasses)\n",
        "print('Output classes : ', classes)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "_haw697lHCZs"
      },
      "outputs": [],
      "source": [
        "def train(num_epochs, model, train_loader, loss_func, optimizer):\n",
        "\n",
        "  # Training mode\n",
        "  model.train()\n",
        "\n",
        "  train_losses = []\n",
        "  train_acc = []\n",
        "\n",
        "  # Train the model\n",
        "  for epoch in range(num_epochs):\n",
        "    running_loss = 0\n",
        "    running_acc = 0\n",
        "    for i, (images, labels) in enumerate(train_loader):\n",
        "\n",
        "      # clear gradients for this training step\n",
        "      optimizer.zero_grad()\n",
        "\n",
        "      # Forward pass\n",
        "      output = model(images)\n",
        "\n",
        "      # Calculate loss\n",
        "      loss = loss_func(output, labels)\n",
        "\n",
        "      # Backpropagation, compute gradients\n",
        "      loss.backward()\n",
        "\n",
        "      # Apply gradients\n",
        "      optimizer.step()\n",
        "\n",
        "      # Running loss\n",
        "      running_loss += loss.item()\n",
        "\n",
        "      # indices of max probabilities\n",
        "      _, preds = torch.max(output, dim=1)\n",
        "\n",
        "      # Calculate number of correct predictions\n",
        "      correct = (preds.float() == labels).sum()\n",
        "      running_acc += correct\n",
        "\n",
        "      # Average loss and acc values\n",
        "      epoch_loss = running_loss / len(train_loader.dataset)\n",
        "      epoch_acc = running_acc / len(train_loader.dataset)\n",
        "\n",
        "    train_losses.append(epoch_loss)\n",
        "    train_acc.append(epoch_acc)\n",
        "    print ('Epoch {}/{}, Loss: {:.4f}, Accuracy: {:.4f}'.format(epoch + 1, num_epochs, epoch_loss, epoch_acc*100))\n",
        "\n",
        "  return train_losses, train_acc"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "x1Wi6vW7IHcR"
      },
      "outputs": [],
      "source": [
        "def test_model(model, testloader):\n",
        "  correct = 0\n",
        "  total = 0\n",
        "  # Deactivate autograd engine (don't compute grads since we're not training)\n",
        "  with torch.no_grad():\n",
        "    for data in testloader:\n",
        "        images, labels = data\n",
        "        # Calculate outputs by running images through the network\n",
        "        outputs = model(images)\n",
        "        # The class with the highest value is what we choose as prediction\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        total += labels.size(0)\n",
        "        correct += (predicted == labels).sum().item()\n",
        "\n",
        "  print('Accuracy of the network: %d %%' % (\n",
        "      100 * correct / total))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "RgxbRadcHIms"
      },
      "outputs": [],
      "source": [
        "# CNN with 2 CONV layers and 3 FC layers\n",
        "class Net(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.conv1 = nn.Conv2d(3, 16, 3)\n",
        "        self.pool = nn.MaxPool2d(2, 2)\n",
        "        self.conv2 = nn.Conv2d(16, 32, 5)\n",
        "        self.fc1 = nn.Linear(32 * 5 * 5, 512)\n",
        "        self.fc2 = nn.Linear(512, 128)\n",
        "        # output layer 10 classes\n",
        "        self.fc3 = nn.Linear(128, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.pool(F.relu(self.conv1(x)))\n",
        "        x = self.pool(F.relu(self.conv2(x)))\n",
        "        # flatten all dimensions except batch\n",
        "        x = torch.flatten(x, 1)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = F.relu(self.fc2(x))\n",
        "        x = self.fc3(x)\n",
        "        return x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "02meBxVOHLNL",
        "outputId": "3461c062-833f-48a3-eb24-11b939f9d8ef"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Net(\n",
            "  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
            "  (conv2): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1))\n",
            "  (fc1): Linear(in_features=800, out_features=512, bias=True)\n",
            "  (fc2): Linear(in_features=512, out_features=128, bias=True)\n",
            "  (fc3): Linear(in_features=128, out_features=10, bias=True)\n",
            ")\n"
          ]
        }
      ],
      "source": [
        "model = Net()\n",
        "print(model)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "lfKHypeYHNHO"
      },
      "outputs": [],
      "source": [
        "# Cross Entropy loss for multi-class classification\n",
        "criterion = nn.CrossEntropyLoss()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "MuDnJL28HPKP"
      },
      "outputs": [],
      "source": [
        "# SGD optimizer with momentum\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.05, momentum=0.9)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AgKhwMrtHRCn",
        "outputId": "48f9fe4d-a85a-4e23-9a4e-cde7c9563345"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n",
            "  self.pid = os.fork()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5, Loss: 0.0131, Accuracy: 38.4520\n",
            "Epoch 2/5, Loss: 0.0092, Accuracy: 58.0580\n",
            "Epoch 3/5, Loss: 0.0077, Accuracy: 65.3020\n",
            "Epoch 4/5, Loss: 0.0067, Accuracy: 70.1300\n",
            "Epoch 5/5, Loss: 0.0056, Accuracy: 74.8020\n"
          ]
        }
      ],
      "source": [
        "num_epochs = 5  # iterations\n",
        "train_losses, train_acc = train(num_epochs, model, trainloader, criterion, optimizer)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "tM2wHKGuHToB",
        "outputId": "cd399625-76db-4513-cf88-8bad27d8c95d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fig = plt.figure(figsize=(10,4))\n",
        "ax = fig.add_subplot(1,2, 1)\n",
        "ax.plot(np.arange(1,len(train_losses)+1),train_losses)\n",
        "plt.xlabel('Training loss')\n",
        "plt.ylabel('Epochs')\n",
        "ax.set_title('Loss vs Epochs')\n",
        "ax = fig.add_subplot(1,2, 2)\n",
        "ax.plot(np.arange(1,len(train_acc)+1),train_acc)\n",
        "plt.xlabel('Training accuracy')\n",
        "plt.ylabel('Epochs')\n",
        "ax.set_title('Accuracy vs Epochs')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3sHK9hhmI-VY",
        "outputId": "d966174f-17eb-4c3e-d864-bcb0ca06a01d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the network: 67 %\n"
          ]
        }
      ],
      "source": [
        "# Accuracy on test data after training\n",
        "test_model(model, testloader)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RBQeCEB6REnH"
      },
      "source": [
        "## Questions\n",
        "1) List some reasons why we should prefer CNN over ANN for image classification?\n",
        "\n",
        "2) Try improving the CNN performance further by tuning the hyperparameters(epochs, optimizer, LR etc). Report the improved test accuracy.\n",
        "\n",
        "3) What happens if you reduce the number of convolution layers to only 1?\n",
        "\n",
        "4) Why didn't we use the Softmax activation in the last layer of CNN?\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###ANSWERS\n",
        "\n",
        "1)Some reasons to prefer CNN over ANN for image classification include:\n",
        "Feature Hierarchies: CNNs are designed to automatically learn hierarchical representations of features, capturing low-level features like edges and textures in early layers, and high-level features like object parts and whole objects in deeper layers. This hierarchical feature learning is essential for understanding complex visual patterns in images, which ANNs may struggle with.\n",
        "Parameter Sharing: CNNs utilize parameter sharing, where a set of weights (filters) is applied across the entire input image, reducing the number of parameters to learn compared to ANNs. This leads to better generalization and efficiency, especially in tasks like image classification where the input data is high-dimensional.\n",
        "Spatial Invariance: CNNs leverage shared weights and pooling operations to achieve translation invariance, making them robust to variations in object position, scale, and orientation within images. ANNs lack this property and may require additional preprocessing to handle such variations effectively.\n",
        "Local Connectivity: CNNs exploit local connectivity by focusing on small receptive fields within the input image, enabling them to capture spatial dependencies and patterns more effectively compared to ANNs, which process the entire input globally.\n",
        "Availability of Pretrained Models: Due to their widespread use and effectiveness, pretrained CNN models (e.g., VGG, ResNet, etc.) are readily available, allowing for transfer learning and fine-tuning on specific image classification tasks without starting from scratch.\n",
        "\n"
      ],
      "metadata": {
        "id": "QPjXwAyXsL7f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import packages\n",
        "import torch\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Define a function to train the model\n",
        "def train(num_epochs, model, train_loader, loss_func, optimizer):\n",
        "    # Training mode\n",
        "    model.train()\n",
        "\n",
        "    # Train the model\n",
        "    for epoch in range(num_epochs):\n",
        "        running_loss = 0.0\n",
        "        for i, (images, labels) in enumerate(train_loader):\n",
        "            # Clear gradients\n",
        "            optimizer.zero_grad()\n",
        "\n",
        "            # Forward pass\n",
        "            outputs = model(images)\n",
        "\n",
        "            # Compute loss\n",
        "            loss = loss_func(outputs, labels)\n",
        "\n",
        "            # Backward pass and optimization\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            running_loss += loss.item()\n",
        "\n",
        "        print(f\"Epoch {epoch+1}/{num_epochs}, Loss: {running_loss / len(train_loader)}\")\n",
        "\n",
        "# Define a function to test the model\n",
        "def test(model, test_loader):\n",
        "    # Evaluation mode\n",
        "    model.eval()\n",
        "    correct = 0\n",
        "    total = 0\n",
        "    with torch.no_grad():\n",
        "        for images, labels in test_loader:\n",
        "            outputs = model(images)\n",
        "            _, predicted = torch.max(outputs.data, 1)\n",
        "            total += labels.size(0)\n",
        "            correct += (predicted == labels).sum().item()\n",
        "\n",
        "    accuracy = 100 * correct / total\n",
        "    print(f\"Test Accuracy: {accuracy}%\")\n",
        "\n",
        "# Define the CNN architecture\n",
        "class CNN(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "        self.conv1 = nn.Conv2d(3, 16, 3, padding=1)\n",
        "        self.pool = nn.MaxPool2d(2, 2)\n",
        "        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)\n",
        "        self.fc1 = nn.Linear(32 * 8 * 8, 128)\n",
        "        self.fc2 = nn.Linear(128, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.pool(F.relu(self.conv1(x)))\n",
        "        x = self.pool(F.relu(self.conv2(x)))\n",
        "        x = x.view(-1, 32 * 8 * 8)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x\n",
        "\n",
        "# Load CIFAR-10 dataset\n",
        "transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n",
        "trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n",
        "train_loader = torch.utils.data.DataLoader(trainset, batch_size=128, shuffle=True, num_workers=2)\n",
        "testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n",
        "test_loader = torch.utils.data.DataLoader(testset, batch_size=128, shuffle=False, num_workers=2)\n",
        "\n",
        "# Initialize the model, loss function, and optimizer\n",
        "model = CNN()\n",
        "loss_func = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)  # Using Adam optimizer with a learning rate of 0.001\n",
        "\n",
        "# Train the model\n",
        "num_epochs = 10\n",
        "train(num_epochs, model, train_loader, loss_func, optimizer)\n",
        "\n",
        "# Test the model\n",
        "test(model, test_loader)\n"
      ],
      "metadata": {
        "id": "Q9WuEwbuwxIA",
        "outputId": "b11a6968-b0fd-456d-e5ec-aaa3c58fbca3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Epoch 1/10, Loss: 1.5425987960127614\n",
            "Epoch 2/10, Loss: 1.2177506333116985\n",
            "Epoch 3/10, Loss: 1.061784254315564\n",
            "Epoch 4/10, Loss: 0.9621512315157429\n",
            "Epoch 5/10, Loss: 0.8863663536203487\n",
            "Epoch 6/10, Loss: 0.8218146503124091\n",
            "Epoch 7/10, Loss: 0.7728721374440986\n",
            "Epoch 8/10, Loss: 0.7191592709487661\n",
            "Epoch 9/10, Loss: 0.6768946506635612\n",
            "Epoch 10/10, Loss: 0.6262804615832961\n",
            "Test Accuracy: 69.78%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#2)\n",
        "Based on the provided output, the test accuracy achieved after training the CNN model for 10 epochs is approximately 69.78%. To further improve the CNN performance, you can experiment with tuning hyperparameters such as:\n",
        "\n",
        "Number of epochs: You can try training the model for more epochs to allow it more time to learn from the data. However, be cautious of overfitting.\n",
        "Optimizer: You can try using different optimizers such as Adam, RMSprop, or adjusting the learning rate of the SGD optimizer.\n",
        "Learning rate (LR): Experiment with different learning rates to find the optimal value for your model. LR schedules such as learning rate decay or using learning rate annealing techniques may also be beneficial.\n",
        "Network architecture: You can try modifying the architecture of your CNN by adding more layers, changing the number of filters, or adjusting the size of the filters.\n",
        "Batch size: Try varying the batch size to see if it affects the model's performance.\n",
        "Data augmentation: Applying data augmentation techniques such as random cropping, flipping, or rotation to the training data can help improve the model's generalization ability.\n",
        "Experimenting with these hyperparameters and techniques can potentially lead to improved performance of your CNN model."
      ],
      "metadata": {
        "id": "OqVzqdiCzECn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3)What happens if you reduce the number of convolution layers to only 1?If you reduce the number of convolution layers to only 1, the model's capacity to learn hierarchical features from the input data will be reduced. With fewer convolutional layers, the model may struggle to capture complex patterns and relationships in the input images. Consequently, the model's performance, in terms of accuracy and ability to generalize to unseen data, may be negatively impacted.\n",
        "\n",
        "4)Why didn't we use the Softmax activation in the last layer of CNN?In many cases, the Softmax activation function is used in the last layer of a CNN when the task is multi-class classification. It converts the raw scores or logits into probabilities, ensuring that the output values are between 0 and 1 and sum up to 1 across all classes. However, in the provided CNN architecture, there is no Softmax activation in the last layer because the Cross Entropy Loss function (nn.CrossEntropyLoss()) combines the softmax activation and the negative log likelihood loss. Therefore, explicitly adding a Softmax activation in the last layer is unnecessary when using nn.CrossEntropyLoss()."
      ],
      "metadata": {
        "id": "oURMeV2-zKae"
      }
    }
  ]
}